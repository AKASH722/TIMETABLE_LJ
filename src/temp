import java.util.Arrays;

public class Temp {
    static boolean assignLab(int courseID, int batchID, int facID, int labId, int[] pos) {
        int count=0;
        for(int p:pos) {
            if(p==401) {
                count++;
            }
        }
        if(count==12) {
            return true;
        }
        int pos2;
        do {
            pos2 = random.nextInt(11);
        } while (pos[pos2] == 401);
        int temp=pos[pos2];
        int b = temp%10;
        int a = temp/10;
        for(int o=0;o<12;o++) {
            int temp_2=pos[o];
            if(temp_2==pos[pos2]+20 || temp_2==pos[pos2]-20)  {
                pos[o]=401;
            }
        }
        pos[pos2]=401;
        faculties[facID].faculty_timetable[a][b] = batches[batchID].batchName;
        lab[labId].lab_timetable[a][b] = batches[batchID].batchName;
        batches[batchID].timetable[a][b] = batches[batchID].course[courseID] + " [" + faculties[facID].facultyName + "]"+ "{"+lab[labId].labName+"}";
        faculties[facID].faculty_timetable[a+1][b] = batches[batchID].batchName;
        lab[labId].lab_timetable[a+1][b] = batches[batchID].batchName;
        batches[batchID].timetable[a + 1][b] = batches[batchID].course[courseID] + " [" + faculties[facID].facultyName + "]" + "{"+lab[labId].labName+"}";
        dbmsYStored[ass++]=b;
        return false;
    }
    static void checkLab(int batchID, int facID, int[] x, int[] y, int labId, int[] pos) {
        for (int a = 0; a < 4; a+=2) {
            for (int b = 0; b < batches[batchID].timetable[a].length; b++) {
                if(batches[batchID].timetable[a][b]==null) {
                    if(faculties[facID].faculty_timetable[a][b]==null) {
                        if(lab[labId].lab_timetable[a][b]==null) {
                            for (int c = 0; c < x.length; c++) {
                                if(x[c] == 401) {
                                    x[c] = a;
                                    y[c] = b;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        generatePosition(x, y, pos);
    }
    static void assignDifferentLab(int courseID, int batchID, int facID, int[] x, int[] y, int[] pos, int no_of_lectures) {
        int labID=0;
        int counter = 0;
        do {
            if(counter==no_of_lectures) {
                break;
            }
            int rem = (no_of_lectures - counter) / 2;
            checkLab(batchID, facID, x, y, labID, pos);
            for (int d = 0; d < rem; d++) {
                if (assignLab(courseID, batchID, facID, labID, pos)) break;
            }
            counter = getCounter(courseID, batchID, facID, labID, counter);
            labID++;
        } while(labID<9);
    }
    static int[] dbmsYStored=new int[10];
    static int ass=0;
    private static int getCounter(int courseID, int batchID, int facID, int labId, int counter) {
        for (int a = 0; a < batches[batchID].timetable.length; a++) {
            for (int b = 0; b < batches[batchID].timetable[a].length; b++) {
                if (batches[batchID].timetable[a][b] == null) {
                    continue;
                }
                if (batches[batchID].timetable[a][b].equals(batches[batchID].course[courseID] + " [" + faculties[facID].facultyName + "]" + "{" + lab[labId].labName + "}")) {
                    counter++;
                }
            }
        }
        return counter;
    }
    private static void assignExtraClass5(int courseID, int batchID, int[] x, int[] storedY, int[] pos, int classID, int facID, int[] pos_2, int no_of_lectures, int[] j, int g) {
        int counter=0;
        counter = getCounter2(courseID, batchID, facID, classID, counter);
        int remClassId=0;
        do {
            if(counter==no_of_lectures) {
                break;
            }
            int rem = (no_of_lectures - counter);
            Arrays.fill(j,401);
            Arrays.fill(pos_2,401);
            checkClassroom5th(batchID, x, storedY, facID, remClassId, g, j, pos_2);
            for (int d = 0; d < rem; d++) {
                if (assignClassroom5th(courseID, batchID, pos, remClassId, facID, pos_2)) break;
            }
            counter = getCounter2(courseID, batchID, facID, remClassId, counter);
            remClassId++;
        } while(remClassId<6);
    }
    private static void assignExtraClass2(int courseID, int batchID, int[] x, int[] y, int facID, int[] pos, int[] storedY, int no_of_lectures) {
        int counter=0;
        int classID=0;
        do {
            if(counter==no_of_lectures) {
                break;
            }
            int rem = (no_of_lectures - counter)/2;
            checkClassroom(batchID, x, y, pos, facID, classID);
            for (int d = 0; d < rem; d++) {
                if (assignClassRoom(courseID, batchID, storedY, pos, facID, classID, d)) break;
            }
            counter = getCounter2(courseID, batchID, facID, classID, counter);
            classID++;
        } while(classID<6);
    }
    static boolean assignClassroom5th(int courseID, int batchID, int[] pos, int classID, int facID, int[] pos_2) {
        int count=0;
        for(int p:pos_2) {
            if(p==401) {
                count++;
            }
        }
        if(count==6) {
            return true;
        }
        int pos2;
        do {
            pos2 = random.nextInt(6);
        } while (pos_2[pos2] == 401);
        int temp=pos_2[pos2];
        int b = temp%10;
        int a = temp/10;
        pos[pos2]=401;
        faculties[facID].faculty_timetable[a][b] = batches[batchID].batchName;
        classrooms[classID].class_timetable[a][b] = batches[batchID].batchName;
        batches[batchID].timetable[a][b] = batches[batchID].course[courseID] + " [" + faculties[facID].facultyName + "]"+ "{"+classrooms[classID].classroom+"}";
        return false;
    }
    static boolean assignClassRoom(int courseID, int batchID, int[] storedY, int[] pos, int facID, int classID, int d) {
        int count=0;
        for(int p:pos) {
            if(p==401) {
                count++;
            }
        }
        if(count==12) {
            return true;
        }
        int pos2;
        do {
            pos2 = random.nextInt(11);
        } while (pos[pos2] == 401);
        int temp=pos[pos2];
        int b = temp%10;
        int a = temp/10;
        for(int o=0;o<12;o++) {
            int temp_2=pos[o];
            if(temp_2==pos[pos2]+20 || temp_2==pos[pos2]-20)  {
                pos[o]=401;
            }
        }
        pos[pos2]=401;
        faculties[facID].faculty_timetable[a][b] = batches[batchID].batchName;
        classrooms[classID].class_timetable[a][b] = batches[batchID].batchName;
        batches[batchID].timetable[a][b] = batches[batchID].course[courseID] + " [" + faculties[facID].facultyName + "]"+ "{"+classrooms[classID].classroom+"}";
        faculties[facID].faculty_timetable[a+1][b] = batches[batchID].batchName;
        classrooms[classID].class_timetable[a+1][b] = batches[batchID].batchName;
        batches[batchID].timetable[a + 1][b] = batches[batchID].course[courseID] + " [" + faculties[facID].facultyName + "]" + "{"+classrooms[classID].classroom+"}";
        storedY[d]=b;
        return false;
    }
    static void checkClassroom(int batchID, int[] x, int[] y, int[] pos, int facID, int classID) {
        for (int a = 0; a < 4; a+=2) {
            for (int b = 0; b < batches[batchID].timetable[a].length; b++) {
                findingPos(batchID, x, y, facID, classID, a, b);
            }
        }
        generatePosition(x, y, pos);
    }
    static void checkClassroom5th(int batchID, int[] x, int[] storedY, int facID, int classID, int g, int[] j, int[] pos_2) {
        for (int b = 0; b < batches[batchID].timetable[g].length; b++) {
            if(batches[batchID].timetable[g][b]==null) {
                if(faculties[facID].faculty_timetable[g][b]==null) {
                    if(classrooms[classID].class_timetable[g][b]==null) {
                        for (int c = 0; c < x.length; c++) {
                            if(j[c] == 401) {
                                j[c] = b;
                                break;
                            }
                        }
                    }
                }
            }
        }
        for(int o=0;o<6;o++) {
            int temp=j[o];
            temp%=10;
            for(int q=0;q<2;q++) {
                if(temp==storedY[q]) {
                    j[o]=401;
                    break;
                }
            }
        }
        for (int m = 0; m < 6; m++) {
            if(j[m]!=401) {
                pos_2[m]=g*10+j[m];
            }
            if(j[m]==401) {
                pos_2[m]=401;
            }
        }
    }
    static void generatePosition(int[] x, int[] y, int[] pos) {
        for (int i = 0; i < 12; i++) {
            if(x[i]!=401) {
                pos[i]=x[i]*10+y[i];
            }
            if(x[i]==401) {
                pos[i]=401;
            }
        }
    }
    public static void findingPos(int batchID, int[] x, int[] y, int facID, int classID, int a, int b) {
        if(batches[batchID].timetable[a][b]==null) {
            if(faculties[facID].faculty_timetable[a][b]==null) {
                if(classrooms[classID].class_timetable[a][b]==null) {
                    for (int c = 0; c < x.length; c++) {
                        if(x[c] == 401) {
                            x[c] = a;
                            y[c] = b;
                            break;
                        }
                    }
                }
            }
        }
    }
}
private static int getCounter2(int courseID, int batchID, int facID, int classID, int counter) {
        for (int a = 0; a < batches[batchID].timetable.length; a++) {
            for (int b = 0; b < batches[batchID].timetable[a].length; b++) {
                if (batches[batchID].timetable[a][b] == null) {
                    continue;
                }
                if (batches[batchID].timetable[a][b].equals(batches[batchID].course[courseID] + " [" + faculties[facID].facultyName + "]" + "{"+classrooms[classID].classroom+"}")) {
                    counter++;
                }
            }
        }
        return counter;
}
/// {

int count_2=0;
        for (Batch batch : batches) {
            if (batch.batchName == null) {
                continue;
            }
            int counter=0;
            for (int i = 0; i < batch.timetable.length; i++) {
                for(int j=0; j< batch.timetable[i].length;j++) {
                    if(batch.timetable[i][j]==null) {
                        counter++;
                    }
                }
            }
            if(counter!=2) {
                count_2+=counter-2;
            }
        }
        System.out.println("JAVA");
                System.out.println(count_2);
}